---
alwaysApply: true
---

## Naming

### Capitalization

File and folder names should always be lowercase. They should never contain uppercase characters.

### Convex files

Use snake case when naming any file that will be stored in the `src/convex` directory, or any of its sub directories.

Examples:

- `src/convex/user/user_actions.ts`
- `src/convex/agent/models/model_presets.ts`

### Hooks

File names for hooks should be in kebab case, and always start with "use". While the file names should be kebab case, the name of the hook function should be camel case. For example:

- `use-screen-size.ts` would contain a hook named _useScreenSize_
- `use-countdown.ts` would contain the hook named _useCountdown_

For hooks created specifically for either XR or native platforms, add the platform name to the hooks file & function name. For example:

A feature named "composer" could have a hook for the web named _useComposerInput_, located at: `src/features/composer/hooks/use-composer-input.ts`. It could then have:

- An XR hook named _useXRComposerInput_, located at: `src/features/composer/hooks/xr/use-xr-composer-input.ts`
- An native hook named _useNativeComposerInput_, located at: `src/features/composer/hooks/native/use-native-composer-input.ts`

**Important**: You do not always need to create an XR and native hook for every new hook created for the web. Only do so when specific platform dependent functionality is required in the hook. Sometimes, the hook that works on the web may also work for native and XR platforms without modification.

### Components

File names for components should be in kebab case. While the file names should be kebab case, the name of the functional component should be pascal case. For example:

- `error-boundary.tsx` could contain a functional component named _ErrorBoundary_
- `markdown-components.tsx` could contain functional components named _Markdown_ and _MarkdownBlock_

For components created specifically for either XR or Native platforms, prepend the components file name and function name with either `xr` or `native`. For example

A feature named "composer" could a contain component for the web named _Composer_, located at: `src/features/composer/components/composer.tsx`. It could then have:

- An XR component named _XRComposer_, located at: `src/features/composer/components/xr/xr-composer.tsx`
- An Native component named _NativeComposer_, located at: `src/features/composer/components/native/native-composer.tsx`

**Important**: You do not always need to create an XR and Native component for every new web component created. Only do so when asked to. Not all components need to be created for each platform.

## Index files

This project uses `index.ts` and `index.tsx` files to keep top level imports cleaner. It is not always necessary, to create theses files, but it can be useful at times. Use your best judgement. For example:

The file `src/features/thread/thread.tsx` contains the _Thread_ component. By default, importing it would look something like this:

`import Thread from "@src/features/thread/thread";`

To avoid writing thread twice, I've created the following file: `src/features/thread/index.tsx`, which contains one line:

- `export { default } from "./thread";`

Now, the _Thread_ component can be imported as follows:

`import Thread from "@src/features/thread";`

## Nesting

Use early returns when appropriate to avoid nesting.

## Error Handling

I have created a simple asynchronous utility function in `src/lib/utils.ts` called _tryCatch_. This function can be used to elegantly handle errors that may arise when calling promises.

That function accepts a promise as an argument, and returns an object containing two fields: data, and error. If data is present, then error is null. If error is present, then data is null.

The beauty of this is that you implement exception handling without the nesting hell that comes along with using try catch blocks, while also verifying that data was returned successfully from your promise. If you check for an error, handle it, and then return early, the typescript server will know that the code proceding that return is executed only in the case where data is not null. Below are some examples of how this can be used:

```typescript
  // get initial usage data
  const { data: usage, error } = await tryCatch(
    fetchQuery(api.sub.sub_queries.getUsage, undefined, { token }),
  );

  // get user's plan
  if (error) {
    console.error(error);
    return <PageFallback />;
  }

  // now we know that usage is not null, and can safely access it
```

```typescript
// request microphone access
const { data: userStream, error } = await tryCatch(
  navigator.mediaDevices.getUserMedia({
    audio: true,
  }),
);
if (error) {
  toast.error("Failed to access microphone");
  return;
}

// userStream is confirmed not null, init recorder
setStream(userStream);
```
