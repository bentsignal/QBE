---
alwaysApply: true
---

# Overview

Most files will fall into one of three folders

1. `src/app`
2. `src/convex`
3. `src/features`

The app directory hosts the files for the Next.js app router. The convex directory hosts the code that runs in the convex deployment. The goal of the features directory is to group code tied heavily to one specific feature into one place.

There will occasionally be exceptions to these guidelines. More info on how to organize code within each these folders will follow below.

## App

**Location**: `src/app`

This project uses the Next.js App Router. The routing files can be found in this directory.

When creating a new page, always create a `loading.tsx` file in the page's directory. By default, this loading file should contain the line `export { default } from "@/components/default-loading";`. This will export a default loading component centered vertically and horizontally, so that the user will see a loading spinner immediately when attempting to navigate to a new page.

You should generally avoid defining reusable components in page files, unless the component is incredibly small and unlikely to be used elsewhere. Creating a `wrapper.tsx` file in the page directory is fine when appropriate.

## Convex

**Location**: `src/convex`

The convex backend runs in a completely separate enviornment from the Next JS back end. It is hosted by convex, and much of the code is executed in their special runtime. Because of this, all convex query, mutation, and action functions must exist inside somewhere inside of `src/convex`.

## Features

**Location**: `src/features`

This project heavily subscribes to the idea that it is best for the files tied to a specific feature to live close together. Files for each feature should be separated into the following sub folders. The example below will use a theoretical feature named _my-feature_.

**_*Important*_**: Each feature will not necessarily require all of these folders. They should be created as needed.

### Components

**Location**: `src/features/my-feature/components`

This would contain all of the reusable components specific to a feature.

### Hooks

**Location**: `src/features/my-feature/hooks`

This would contain all of the hooks specific to a feature.

### Store

**Location**: `src/features/my-feature/store`

If a feature requires a zustand store, the store definition file should go in here. For my feature, the file would be: `src/features/my-feature/store/my-feature-store.ts`

### Config

**Location**: `src/features/my-feature/config`

Config files for a specific feature. This is usually constants used across a feature. For example, the page size when using pagination.

### Types

**Location**: `src/features/my-feature/types`

Type definitions related to a feature.

### Util

**Location**: `src/features/my-feature/util`

Utility functions related to a feature

### Styles

**Location**: `src/features/my-feature/styles`

Rarely needed since the project uses tailwind for styling. But if a css file is ever needed for a feature, it would go in here.

### Data

**Location**: `src/features/my-feature/data`

Stores data related to a feature. For example, the speech feature could consume an object containing a list of commands, and metadata related to each command.

## Other

### Components

General purpose components that are not tied to a specific feature and will likely be reused across the project should be stored in `src/components`. Below are some examples of components that would go in this folder:

- _Logo_ `logo.tsx`: The logo for the product, reused across the auth components as well as the homepage
- _CustomButton_ `custom-button.tsx`: A button component with custom behavior for loading states.

**_Important_**: Do not ever create new files in `src/components/ui`, that folder is exclusively for components installed from registries.

### Hooks

Standalone hooks that are not tied to a specific feature should go in `src/hooks`. Some examples could be:

- _useCountdown_ `use-countdown.tsx`: A component that shows how much time is remaining until a certain date is hit
- _useDebouncedInputs_ `use-debounced-inputs`: A hook for debouncing text being entered into any input field.

### Util

Utility functions that are not heavily tied to a specific feature live here. Very general isolated functions can go in `src/lib/utils.ts`. For tighter groups of utility functions, create a new file to hold the functions. For example:

- `date-time-utils.ts` holds all of the utility functions related to the date and time
- `color-utils.ts` holds all of the utility functions related to color
- `utils.ts` holds unique functions.

### Styles

Styling files not related to a specific feature go in `src/styles`. The styles folder contains a few css files for the web app, but most importantly it contains `xr-styles.ts`. This file is inspired by tailwind, and allows the use of tailwind like utility classes inside of XR components.

### Providers

This folder contains context providers that wrap the entire web app. If a new context provider is needed, the following steps should be taken:

1. Create a new file in `src/providers` for the new context provider. Ex, the convex provider is a component named _ConvexProvider_, an is stored in `src/providers/convex-provider.tsx`.
2. Add this component to the _Providers_ component in `src/providers.tsx`. This component wraps the entire web app. So if you add the new provider to the _Providers_ component, it will also wrap the entire app. Make sure to be concious about where in the hierarchy you add the new provider, as the hierarchy of context providers is important.

ex:

```typescript
export default function Providers({children}: {children: React.ReactNode}) {
  return (
    <ConvexProvider>
      <ThemeProvider>
        {children}
      </ThemeProvider>
    </ConvexProvider>
  )
}
```
